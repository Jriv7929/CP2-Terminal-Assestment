
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

public class Salary extends javax.swing.JFrame {

    
   public static double calculateSSS(double salary) {
    if (salary >= 22250 && salary < 22750) return 1012.50;
    if (salary >= 22750 && salary < 23250) return 1035.00;
    if (salary >= 23250 && salary < 23750) return 1057.50;
    if (salary >= 23750 && salary < 24250) return 1080.00;
    if (salary >= 24250 && salary < 24750) return 1102.50;
    if (salary >= 24750) return 1125.00;
    return 0.0;
}

public static double calculatePhilHealth(double salary) {
    if (salary >= 10000.01 && salary <= 59999.99) return salary * 0.03;
    if (salary >= 60000) return salary * 0.03;
    return 0.0;
}

public static double calculatePagIbig(double salary) {
    double deduction = salary * 0.02;
    return (deduction > 100) ? 100 : deduction;
}

public static double calculateWithholdingTax(double totalEarnings) {
    if (totalEarnings >= 20833 && totalEarnings < 33333) return (totalEarnings - 20833) * 0.20;
    if (totalEarnings >= 33333 && totalEarnings < 66667) return 2500 + (totalEarnings - 33333) * 0.25;
    if (totalEarnings >= 66667 && totalEarnings < 166667) return 10833 + (totalEarnings - 66667) * 0.30;
    if (totalEarnings >= 166667 && totalEarnings < 666667) return 40833.33 + (totalEarnings - 166667) * 0.32;
    if (totalEarnings >= 666667) return 200833.33 + (totalEarnings - 666667) * 0.35;
    return 0.0;
}
    
    public Salary() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        close2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        salaryoutput = new javax.swing.JTextPane();
        calsalary = new javax.swing.JButton();
        entempno = new javax.swing.JTextField();
        hoursworkedlabel = new javax.swing.JLabel();
        choosemonthlabel = new javax.swing.JLabel();
        month = new com.toedter.calendar.JMonthChooser();
        entemplabel = new javax.swing.JLabel();
        hoursworked = new javax.swing.JTextField();
        close3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        calhours = new javax.swing.JButton();

        close2.setText("Close");
        close2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close2ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(400, 200));
        setMaximumSize(new java.awt.Dimension(900, 600));
        setMinimumSize(new java.awt.Dimension(900, 600));

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setMinimumSize(new java.awt.Dimension(900, 500));
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 500));

        salaryoutput.setEditable(false);
        jScrollPane1.setViewportView(salaryoutput);

        calsalary.setText("Calculate Salary");
        calsalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calsalaryActionPerformed(evt);
            }
        });

        entempno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entempnoActionPerformed(evt);
            }
        });

        hoursworkedlabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        hoursworkedlabel.setForeground(new java.awt.Color(255, 255, 255));
        hoursworkedlabel.setText("Total hours worked: ");

        choosemonthlabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        choosemonthlabel.setForeground(new java.awt.Color(255, 255, 255));
        choosemonthlabel.setText("Select month coverage:");

        month.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                monthAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        entemplabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        entemplabel.setForeground(new java.awt.Color(255, 255, 255));
        entemplabel.setText("Enter Employee number: ");

        hoursworked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hoursworkedActionPerformed(evt);
            }
        });

        close3.setText("Close");
        close3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Salary Computation");

        calhours.setText("Calculate Hours");
        calhours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calhoursActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(close3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(calsalary, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(entemplabel)
                                            .addComponent(choosemonthlabel)
                                            .addComponent(hoursworkedlabel))
                                        .addGap(39, 39, 39)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(entempno, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(hoursworked, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(calhours, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)))
                                .addGap(57, 57, 57)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(entemplabel)
                            .addComponent(entempno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(choosemonthlabel))
                        .addGap(35, 35, 35)
                        .addComponent(calhours, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hoursworked, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hoursworkedlabel))
                        .addGap(146, 146, 146)
                        .addComponent(calsalary, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addComponent(close3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void entempnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entempnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entempnoActionPerformed

    private void hoursworkedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hoursworkedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hoursworkedActionPerformed

    private void close2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        homepage pi = new homepage();
        pi.setVisible(true);
    }//GEN-LAST:event_close2ActionPerformed

    private void close3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close3ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        homepage pi = new homepage();
        pi.setVisible(true);
    }//GEN-LAST:event_close3ActionPerformed

    private void calsalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calsalaryActionPerformed
 
      String hoursText = hoursworked.getText().trim();

    if (hoursText.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter Hours Worked.");
        return;
    }

    double totalHours;
    try {
        totalHours = Double.parseDouble(hoursText);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "Invalid input for hours worked.");
        return;
    }

    double basicSalary = 0.0;
    String empNo = "";

    // Read the first employee record in empinfo.csv
    String empInfoPath = "src/empinfo.csv";

    try (BufferedReader br = new BufferedReader(new FileReader(empInfoPath))) {
        String line = br.readLine(); // Get first line only (or modify logic as needed)
        if (line != null) {
            String[] parts = line.split(",");
            if (parts.length >= 8) {
                empNo = parts[0]; // Optional: show in output
                basicSalary = Double.parseDouble(parts[7]); // Index 7 = Basic Salary
            }
        }
    } catch (IOException | NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "Error reading empinfo.csv: " + ex.getMessage());
        return;
    }

    if (basicSalary == 0.0) {
        JOptionPane.showMessageDialog(null, "No basic salary found in empinfo.csv.");
        return;
    }

    // Salary computation
    double hourlyRate = basicSalary / 160;
    double totalEarnings = totalHours * hourlyRate;

    double sss = calculateSSS(basicSalary);
    double philHealth = calculatePhilHealth(basicSalary);
    double pagIbig = calculatePagIbig(basicSalary);
    double withholdingTax = calculateWithholdingTax(totalEarnings);

    double deductions = sss + philHealth + pagIbig;
    double netIncome = totalEarnings - deductions - withholdingTax;

    // Output to JTextPane
    StringBuilder output = new StringBuilder();
    output.append("Employee #: ").append(empNo.isEmpty() ? "N/A" : empNo).append("\n");
    output.append("Basic Salary: ₱").append(String.format("%.2f", basicSalary)).append("\n");
    output.append("Hourly Rate: ₱").append(String.format("%.2f", hourlyRate)).append("\n");
    output.append("Hours Worked: ").append(String.format("%.2f", totalHours)).append(" hrs\n");
    output.append("Total Earnings: ₱").append(String.format("%.2f", totalEarnings)).append("\n\n");

    output.append("Deductions:\n");
    output.append("SSS: ₱").append(String.format("%.2f", sss)).append("\n");
    output.append("PhilHealth: ₱").append(String.format("%.2f", philHealth)).append("\n");
    output.append("Pag-IBIG: ₱").append(String.format("%.2f", pagIbig)).append("\n");
    output.append("Withholding Tax: ₱").append(String.format("%.2f", withholdingTax)).append("\n\n");

    output.append("Net Income: ₱").append(String.format("%.2f", netIncome));

    salaryoutput.setText(output.toString());
    }//GEN-LAST:event_calsalaryActionPerformed

    private void monthAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_monthAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_monthAncestorAdded

    private void calhoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calhoursActionPerformed
      
        
    calhours.addActionListener(e -> {
    String empNo = entempno.getText().trim();
    int selectedMonth = month.getMonth(); // JMonthChooser returns 0 = Jan

    if (empNo.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter an employee number.");
        return;
    }

    String filePath = "C:\\Users\\SCHOOL\\Documents\\NetBeansProjects\\MotorPH_Employee_Application\\src\\empatnd.csv";
    double totalHours = 0;

    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
        String line;
        while ((line = br.readLine()) != null) {
            String[] parts = line.split(",");
            if (parts.length >= 4 && parts[0].equals(empNo)) {
                LocalDate date = LocalDate.parse(parts[1]); // format: yyyy-MM-dd
                if (date.getMonthValue() - 1 == selectedMonth) {
                    LocalTime timeIn = LocalTime.parse(parts[2]);  // format: HH:mm or HH:mm:ss
                    LocalTime timeOut = LocalTime.parse(parts[3]);
                    Duration worked = Duration.between(timeIn, timeOut);
                    totalHours += worked.toMinutes() / 60.0;  // convert to decimal hours
                }
            }
        }
        hoursworked.setText(String.format("%.2f", totalHours));
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(null, "File error: " + ex.getMessage());
    } catch (DateTimeParseException ex) {
        JOptionPane.showMessageDialog(null, "Date/time format error in CSV: " + ex.getMessage());
    }
});
        
        
    }//GEN-LAST:event_calhoursActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Salary().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calhours;
    private javax.swing.JButton calsalary;
    private javax.swing.JLabel choosemonthlabel;
    private javax.swing.JButton close2;
    private javax.swing.JButton close3;
    private javax.swing.JLabel entemplabel;
    private javax.swing.JTextField entempno;
    private javax.swing.JTextField hoursworked;
    private javax.swing.JLabel hoursworkedlabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JMonthChooser month;
    private javax.swing.JTextPane salaryoutput;
    // End of variables declaration//GEN-END:variables
}
